
TRABAJO_MICROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b34  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003ccc  08003ccc  00013ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ce4  08003ce4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ce4  08003ce4  00013ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cec  08003cec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  08003d00  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003d00  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bee4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c83  00000000  00000000  0002bf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0002dba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  0002e758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016793  00000000  00000000  0002f230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce11  00000000  00000000  000459c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093a4d  00000000  00000000  000527d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6221  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e4  00000000  00000000  000e6274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003cb4 	.word	0x08003cb4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003cb4 	.word	0x08003cb4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <servo_manual>:
int abierto=0;
volatile uint8_t modo=0;
volatile uint8_t dma_completo = 0;


uint32_t servo_manual(uint32_t value){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	if(value>0 && value<3500){ // cerrado
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d012      	beq.n	8000510 <servo_manual+0x34>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f640 52ab 	movw	r2, #3499	; 0xdab
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d80d      	bhi.n	8000510 <servo_manual+0x34>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	4811      	ldr	r0, [pc, #68]	; (8000540 <servo_manual+0x64>)
 80004fc:	f002 f8aa 	bl	8002654 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,1);
 8000500:	2201      	movs	r2, #1
 8000502:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000506:	480e      	ldr	r0, [pc, #56]	; (8000540 <servo_manual+0x64>)
 8000508:	f002 f8a4 	bl	8002654 <HAL_GPIO_WritePin>
		return 5;
 800050c:	2305      	movs	r3, #5
 800050e:	e013      	b.n	8000538 <servo_manual+0x5c>
	}
	else if(value>=3500){ // abierto
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f640 52ab 	movw	r2, #3499	; 0xdab
 8000516:	4293      	cmp	r3, r2
 8000518:	d90d      	bls.n	8000536 <servo_manual+0x5a>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,1);
 800051a:	2201      	movs	r2, #1
 800051c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000520:	4807      	ldr	r0, [pc, #28]	; (8000540 <servo_manual+0x64>)
 8000522:	f002 f897 	bl	8002654 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,0);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800052c:	4804      	ldr	r0, [pc, #16]	; (8000540 <servo_manual+0x64>)
 800052e:	f002 f891 	bl	8002654 <HAL_GPIO_WritePin>
		return 10;
 8000532:	230a      	movs	r3, #10
 8000534:	e000      	b.n	8000538 <servo_manual+0x5c>
	}
	else return 5;
 8000536:	2305      	movs	r3, #5
}
 8000538:	4618      	mov	r0, r3
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40021000 	.word	0x40021000

08000544 <servo_automatico>:

uint32_t servo_automatico(){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0

	int contador=0,tiempo=0;
 800054a:	2300      	movs	r3, #0
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	2300      	movs	r3, #0
 8000550:	603b      	str	r3, [r7, #0]

	HAL_Delay(2000);
 8000552:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000556:	f000 fd1f 	bl	8000f98 <HAL_Delay>

		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)){
 800055a:	2140      	movs	r1, #64	; 0x40
 800055c:	4828      	ldr	r0, [pc, #160]	; (8000600 <servo_automatico+0xbc>)
 800055e:	f002 f861 	bl	8002624 <HAL_GPIO_ReadPin>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d031      	beq.n	80005cc <servo_automatico+0x88>
			tiempo=HAL_GetTick();
 8000568:	f000 fd0a 	bl	8000f80 <HAL_GetTick>
 800056c:	4603      	mov	r3, r0
 800056e:	603b      	str	r3, [r7, #0]
			while(contador<4){
 8000570:	e027      	b.n	80005c2 <servo_automatico+0x7e>
				if((HAL_GetTick()-tiempo)>=25){
 8000572:	f000 fd05 	bl	8000f80 <HAL_GetTick>
 8000576:	4602      	mov	r2, r0
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	2b18      	cmp	r3, #24
 800057e:	d90d      	bls.n	800059c <servo_automatico+0x58>
					if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)==0){
 8000580:	2140      	movs	r1, #64	; 0x40
 8000582:	481f      	ldr	r0, [pc, #124]	; (8000600 <servo_automatico+0xbc>)
 8000584:	f002 f84e 	bl	8002624 <HAL_GPIO_ReadPin>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d01d      	beq.n	80005ca <servo_automatico+0x86>
						break;
					}
					else {
						tiempo=HAL_GetTick();
 800058e:	f000 fcf7 	bl	8000f80 <HAL_GetTick>
 8000592:	4603      	mov	r3, r0
 8000594:	603b      	str	r3, [r7, #0]
						contador++;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3301      	adds	r3, #1
 800059a:	607b      	str	r3, [r7, #4]
					}
				}
				if(contador==4){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b04      	cmp	r3, #4
 80005a0:	d10f      	bne.n	80005c2 <servo_automatico+0x7e>
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10);
 80005a2:	4b18      	ldr	r3, [pc, #96]	; (8000604 <servo_automatico+0xc0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	220a      	movs	r2, #10
 80005a8:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b0:	4815      	ldr	r0, [pc, #84]	; (8000608 <servo_automatico+0xc4>)
 80005b2:	f002 f84f 	bl	8002654 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005bc:	4812      	ldr	r0, [pc, #72]	; (8000608 <servo_automatico+0xc4>)
 80005be:	f002 f849 	bl	8002654 <HAL_GPIO_WritePin>
			while(contador<4){
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	ddd4      	ble.n	8000572 <servo_automatico+0x2e>
 80005c8:	e000      	b.n	80005cc <servo_automatico+0x88>
						break;
 80005ca:	bf00      	nop
				}
			}
		}

		HAL_Delay(5000);
 80005cc:	f241 3088 	movw	r0, #5000	; 0x1388
 80005d0:	f000 fce2 	bl	8000f98 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,5); // cerrado
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <servo_automatico+0xc0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2205      	movs	r2, #5
 80005da:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,0);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e2:	4809      	ldr	r0, [pc, #36]	; (8000608 <servo_automatico+0xc4>)
 80005e4:	f002 f836 	bl	8002654 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,1);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ee:	4806      	ldr	r0, [pc, #24]	; (8000608 <servo_automatico+0xc4>)
 80005f0:	f002 f830 	bl	8002654 <HAL_GPIO_WritePin>
}
 80005f4:	bf00      	nop
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40020000 	.word	0x40020000
 8000604:	200000d0 	.word	0x200000d0
 8000608:	40021000 	.word	0x40021000

0800060c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_5){
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	2b20      	cmp	r3, #32
 800061a:	d110      	bne.n	800063e <HAL_GPIO_EXTI_Callback+0x32>
		if(modo==0)modo=1;
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <HAL_GPIO_EXTI_Callback+0x40>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2b00      	cmp	r3, #0
 8000624:	d103      	bne.n	800062e <HAL_GPIO_EXTI_Callback+0x22>
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_GPIO_EXTI_Callback+0x40>)
 8000628:	2201      	movs	r2, #1
 800062a:	701a      	strb	r2, [r3, #0]
		else if(modo==1)modo=0;
	}
}
 800062c:	e007      	b.n	800063e <HAL_GPIO_EXTI_Callback+0x32>
		else if(modo==1)modo=0;
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <HAL_GPIO_EXTI_Callback+0x40>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b01      	cmp	r3, #1
 8000636:	d102      	bne.n	800063e <HAL_GPIO_EXTI_Callback+0x32>
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <HAL_GPIO_EXTI_Callback+0x40>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000128 	.word	0x20000128

08000650 <encender_led>:

int encender_led(uint32_t value){
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	if(value<3000)return 1;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800065e:	4293      	cmp	r3, r2
 8000660:	d801      	bhi.n	8000666 <encender_led+0x16>
 8000662:	2301      	movs	r3, #1
 8000664:	e000      	b.n	8000668 <encender_led+0x18>
	else return 0;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  // Indicar que la transferencia DMA ha terminado
  dma_completo = 1;
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <HAL_ADC_ConvCpltCallback+0x1c>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000129 	.word	0x20000129

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b598      	push	{r3, r4, r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fc0c 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f84e 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f9d4 	bl	8000a4c <MX_GPIO_Init>
  MX_DMA_Init();
 80006a4:	f000 f9b2 	bl	8000a0c <MX_DMA_Init>
  MX_ADC1_Init();
 80006a8:	f000 f8b0 	bl	800080c <MX_ADC1_Init>
  MX_TIM1_Init();
 80006ac:	f000 f90e 	bl	80008cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	481b      	ldr	r0, [pc, #108]	; (8000720 <main+0x8c>)
 80006b4:	f002 fd0c 	bl	80030d0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <main+0x8c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2200      	movs	r2, #0
 80006be:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_ADC_Start_DMA(&hadc1,valor_adc,2); // lectura de varios canales con DMA
 80006c0:	2202      	movs	r2, #2
 80006c2:	4918      	ldr	r1, [pc, #96]	; (8000724 <main+0x90>)
 80006c4:	4818      	ldr	r0, [pc, #96]	; (8000728 <main+0x94>)
 80006c6:	f000 fddf 	bl	8001288 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 pot_val=valor_adc[0];
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <main+0x90>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a17      	ldr	r2, [pc, #92]	; (800072c <main+0x98>)
 80006d0:	6013      	str	r3, [r2, #0]
	 ldr_val=valor_adc[1];
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <main+0x90>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	4a16      	ldr	r2, [pc, #88]	; (8000730 <main+0x9c>)
 80006d8:	6013      	str	r3, [r2, #0]

	  if(modo==1){
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <main+0xa0>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d109      	bne.n	80006f8 <main+0x64>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,servo_manual(pot_val));
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <main+0x98>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a0d      	ldr	r2, [pc, #52]	; (8000720 <main+0x8c>)
 80006ea:	6814      	ldr	r4, [r2, #0]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fef5 	bl	80004dc <servo_manual>
 80006f2:	4603      	mov	r3, r0
 80006f4:	6363      	str	r3, [r4, #52]	; 0x34
 80006f6:	e001      	b.n	80006fc <main+0x68>

	  }
	  else
		  servo_automatico();
 80006f8:	f7ff ff24 	bl	8000544 <servo_automatico>

	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,encender_led(ldr_val));
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <main+0x9c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ffa5 	bl	8000650 <encender_led>
 8000706:	4603      	mov	r3, r0
 8000708:	b2db      	uxtb	r3, r3
 800070a:	461a      	mov	r2, r3
 800070c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000710:	4809      	ldr	r0, [pc, #36]	; (8000738 <main+0xa4>)
 8000712:	f001 ff9f 	bl	8002654 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 8000716:	200a      	movs	r0, #10
 8000718:	f000 fc3e 	bl	8000f98 <HAL_Delay>
	 pot_val=valor_adc[0];
 800071c:	e7d5      	b.n	80006ca <main+0x36>
 800071e:	bf00      	nop
 8000720:	200000d0 	.word	0x200000d0
 8000724:	20000118 	.word	0x20000118
 8000728:	20000028 	.word	0x20000028
 800072c:	20000120 	.word	0x20000120
 8000730:	20000124 	.word	0x20000124
 8000734:	20000128 	.word	0x20000128
 8000738:	40020c00 	.word	0x40020c00

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2230      	movs	r2, #48	; 0x30
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f003 faaa 	bl	8003ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <SystemClock_Config+0xc8>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	4a26      	ldr	r2, [pc, #152]	; (8000804 <SystemClock_Config+0xc8>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	; 0x40
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <SystemClock_Config+0xc8>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	4b21      	ldr	r3, [pc, #132]	; (8000808 <SystemClock_Config+0xcc>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a20      	ldr	r2, [pc, #128]	; (8000808 <SystemClock_Config+0xcc>)
 8000786:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <SystemClock_Config+0xcc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a0:	2310      	movs	r3, #16
 80007a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a4:	2302      	movs	r3, #2
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007ac:	2308      	movs	r3, #8
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80007b0:	2350      	movs	r3, #80	; 0x50
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80007b8:	2308      	movs	r3, #8
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 ff79 	bl	80026b8 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007cc:	f000 f9e6 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80007d8:	23a0      	movs	r3, #160	; 0xa0
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 f9db 	bl	8002ba8 <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007f8:	f000 f9d0 	bl	8000b9c <Error_Handler>
  }
}
 80007fc:	bf00      	nop
 80007fe:	3750      	adds	r7, #80	; 0x50
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <MX_ADC1_Init+0xb4>)
 8000820:	4a28      	ldr	r2, [pc, #160]	; (80008c4 <MX_ADC1_Init+0xb8>)
 8000822:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000824:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MX_ADC1_Init+0xb4>)
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800082a:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <MX_ADC1_Init+0xb4>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <MX_ADC1_Init+0xb4>)
 8000832:	2201      	movs	r2, #1
 8000834:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <MX_ADC1_Init+0xb4>)
 8000838:	2201      	movs	r2, #1
 800083a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083c:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <MX_ADC1_Init+0xb4>)
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_ADC1_Init+0xb4>)
 8000846:	2200      	movs	r2, #0
 8000848:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800084a:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <MX_ADC1_Init+0xb4>)
 800084c:	4a1e      	ldr	r2, [pc, #120]	; (80008c8 <MX_ADC1_Init+0xbc>)
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_ADC1_Init+0xb4>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_ADC1_Init+0xb4>)
 8000858:	2202      	movs	r2, #2
 800085a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_ADC1_Init+0xb4>)
 800085e:	2201      	movs	r2, #1
 8000860:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_ADC1_Init+0xb4>)
 8000866:	2201      	movs	r2, #1
 8000868:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800086a:	4815      	ldr	r0, [pc, #84]	; (80008c0 <MX_ADC1_Init+0xb4>)
 800086c:	f000 fbb8 	bl	8000fe0 <HAL_ADC_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000876:	f000 f991 	bl	8000b9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800087a:	2301      	movs	r3, #1
 800087c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000882:	2307      	movs	r3, #7
 8000884:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000886:	463b      	mov	r3, r7
 8000888:	4619      	mov	r1, r3
 800088a:	480d      	ldr	r0, [pc, #52]	; (80008c0 <MX_ADC1_Init+0xb4>)
 800088c:	f000 fe0a 	bl	80014a4 <HAL_ADC_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000896:	f000 f981 	bl	8000b9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800089a:	2303      	movs	r3, #3
 800089c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <MX_ADC1_Init+0xb4>)
 80008a8:	f000 fdfc 	bl	80014a4 <HAL_ADC_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80008b2:	f000 f973 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000028 	.word	0x20000028
 80008c4:	40012000 	.word	0x40012000
 80008c8:	0f000001 	.word	0x0f000001

080008cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b096      	sub	sp, #88	; 0x58
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
 80008fa:	615a      	str	r2, [r3, #20]
 80008fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2220      	movs	r2, #32
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f003 f9cd 	bl	8003ca4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800090a:	4b3e      	ldr	r3, [pc, #248]	; (8000a04 <MX_TIM1_Init+0x138>)
 800090c:	4a3e      	ldr	r2, [pc, #248]	; (8000a08 <MX_TIM1_Init+0x13c>)
 800090e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2000-1;
 8000910:	4b3c      	ldr	r3, [pc, #240]	; (8000a04 <MX_TIM1_Init+0x138>)
 8000912:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000916:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000918:	4b3a      	ldr	r3, [pc, #232]	; (8000a04 <MX_TIM1_Init+0x138>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800091e:	4b39      	ldr	r3, [pc, #228]	; (8000a04 <MX_TIM1_Init+0x138>)
 8000920:	2263      	movs	r2, #99	; 0x63
 8000922:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000924:	4b37      	ldr	r3, [pc, #220]	; (8000a04 <MX_TIM1_Init+0x138>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800092a:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <MX_TIM1_Init+0x138>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000930:	4b34      	ldr	r3, [pc, #208]	; (8000a04 <MX_TIM1_Init+0x138>)
 8000932:	2280      	movs	r2, #128	; 0x80
 8000934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000936:	4833      	ldr	r0, [pc, #204]	; (8000a04 <MX_TIM1_Init+0x138>)
 8000938:	f002 fb22 	bl	8002f80 <HAL_TIM_Base_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000942:	f000 f92b 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800094c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000950:	4619      	mov	r1, r3
 8000952:	482c      	ldr	r0, [pc, #176]	; (8000a04 <MX_TIM1_Init+0x138>)
 8000954:	f002 fd2e 	bl	80033b4 <HAL_TIM_ConfigClockSource>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800095e:	f000 f91d 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000962:	4828      	ldr	r0, [pc, #160]	; (8000a04 <MX_TIM1_Init+0x138>)
 8000964:	f002 fb5b 	bl	800301e <HAL_TIM_PWM_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800096e:	f000 f915 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800097a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800097e:	4619      	mov	r1, r3
 8000980:	4820      	ldr	r0, [pc, #128]	; (8000a04 <MX_TIM1_Init+0x138>)
 8000982:	f003 f8ab 	bl	8003adc <HAL_TIMEx_MasterConfigSynchronization>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800098c:	f000 f906 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000990:	2360      	movs	r3, #96	; 0x60
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800099c:	2300      	movs	r3, #0
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	2200      	movs	r2, #0
 80009b2:	4619      	mov	r1, r3
 80009b4:	4813      	ldr	r0, [pc, #76]	; (8000a04 <MX_TIM1_Init+0x138>)
 80009b6:	f002 fc3b 	bl	8003230 <HAL_TIM_PWM_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80009c0:	f000 f8ec 	bl	8000b9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	4619      	mov	r1, r3
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <MX_TIM1_Init+0x138>)
 80009e8:	f003 f8e6 	bl	8003bb8 <HAL_TIMEx_ConfigBreakDeadTime>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80009f2:	f000 f8d3 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009f6:	4803      	ldr	r0, [pc, #12]	; (8000a04 <MX_TIM1_Init+0x138>)
 80009f8:	f000 f9a0 	bl	8000d3c <HAL_TIM_MspPostInit>

}
 80009fc:	bf00      	nop
 80009fe:	3758      	adds	r7, #88	; 0x58
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200000d0 	.word	0x200000d0
 8000a08:	40010000 	.word	0x40010000

08000a0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_DMA_Init+0x3c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <MX_DMA_Init+0x3c>)
 8000a1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_DMA_Init+0x3c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	2038      	movs	r0, #56	; 0x38
 8000a34:	f001 f8cb 	bl	8001bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a38:	2038      	movs	r0, #56	; 0x38
 8000a3a:	f001 f8e4 	bl	8001c06 <HAL_NVIC_EnableIRQ>

}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b48      	ldr	r3, [pc, #288]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a47      	ldr	r2, [pc, #284]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b45      	ldr	r3, [pc, #276]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b41      	ldr	r3, [pc, #260]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a40      	ldr	r2, [pc, #256]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b3e      	ldr	r3, [pc, #248]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	4b3a      	ldr	r3, [pc, #232]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a39      	ldr	r2, [pc, #228]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000aa4:	f043 0310 	orr.w	r3, r3, #16
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b37      	ldr	r3, [pc, #220]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b33      	ldr	r3, [pc, #204]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a32      	ldr	r2, [pc, #200]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000ac0:	f043 0308 	orr.w	r3, r3, #8
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b30      	ldr	r3, [pc, #192]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0308 	and.w	r3, r3, #8
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8000ad8:	482c      	ldr	r0, [pc, #176]	; (8000b8c <MX_GPIO_Init+0x140>)
 8000ada:	f001 fdbb 	bl	8002654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8000ae4:	482a      	ldr	r0, [pc, #168]	; (8000b90 <MX_GPIO_Init+0x144>)
 8000ae6:	f001 fdb5 	bl	8002654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000aea:	2320      	movs	r3, #32
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4825      	ldr	r0, [pc, #148]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000b00:	f001 fc0c 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b04:	2340      	movs	r3, #64	; 0x40
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	481f      	ldr	r0, [pc, #124]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000b18:	f001 fc00 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	481a      	ldr	r0, [pc, #104]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000b30:	f001 fbf4 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE13 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000b34:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480f      	ldr	r0, [pc, #60]	; (8000b8c <MX_GPIO_Init+0x140>)
 8000b4e:	f001 fbe5 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8000b52:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4809      	ldr	r0, [pc, #36]	; (8000b90 <MX_GPIO_Init+0x144>)
 8000b6c:	f001 fbd6 	bl	800231c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2017      	movs	r0, #23
 8000b76:	f001 f82a 	bl	8001bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b7a:	2017      	movs	r0, #23
 8000b7c:	f001 f843 	bl	8001c06 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b80:	bf00      	nop
 8000b82:	3728      	adds	r7, #40	; 0x28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40020c00 	.word	0x40020c00
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40020800 	.word	0x40020800

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000be6:	2007      	movs	r0, #7
 8000be8:	f000 ffe6 	bl	8001bb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a33      	ldr	r2, [pc, #204]	; (8000ce4 <HAL_ADC_MspInit+0xec>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d15f      	bne.n	8000cda <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <HAL_ADC_MspInit+0xf0>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a31      	ldr	r2, [pc, #196]	; (8000ce8 <HAL_ADC_MspInit+0xf0>)
 8000c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <HAL_ADC_MspInit+0xf0>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <HAL_ADC_MspInit+0xf0>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a2a      	ldr	r2, [pc, #168]	; (8000ce8 <HAL_ADC_MspInit+0xf0>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <HAL_ADC_MspInit+0xf0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000c52:	230a      	movs	r3, #10
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c56:	2303      	movs	r3, #3
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4821      	ldr	r0, [pc, #132]	; (8000cec <HAL_ADC_MspInit+0xf4>)
 8000c66:	f001 fb59 	bl	800231c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <HAL_ADC_MspInit+0xf8>)
 8000c6c:	4a21      	ldr	r2, [pc, #132]	; (8000cf4 <HAL_ADC_MspInit+0xfc>)
 8000c6e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <HAL_ADC_MspInit+0xf8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c76:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <HAL_ADC_MspInit+0xf8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <HAL_ADC_MspInit+0xf8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_ADC_MspInit+0xf8>)
 8000c84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c88:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_ADC_MspInit+0xf8>)
 8000c8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c90:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_ADC_MspInit+0xf8>)
 8000c94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_ADC_MspInit+0xf8>)
 8000c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_ADC_MspInit+0xf8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_ADC_MspInit+0xf8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cae:	4810      	ldr	r0, [pc, #64]	; (8000cf0 <HAL_ADC_MspInit+0xf8>)
 8000cb0:	f000 ffc4 	bl	8001c3c <HAL_DMA_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000cba:	f7ff ff6f 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_ADC_MspInit+0xf8>)
 8000cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_ADC_MspInit+0xf8>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2012      	movs	r0, #18
 8000cd0:	f000 ff7d 	bl	8001bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000cd4:	2012      	movs	r0, #18
 8000cd6:	f000 ff96 	bl	8001c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40012000 	.word	0x40012000
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	20000070 	.word	0x20000070
 8000cf4:	40026410 	.word	0x40026410

08000cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <HAL_TIM_Base_MspInit+0x3c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d10d      	bne.n	8000d26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_TIM_Base_MspInit+0x40>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a09      	ldr	r2, [pc, #36]	; (8000d38 <HAL_TIM_Base_MspInit+0x40>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <HAL_TIM_Base_MspInit+0x40>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40010000 	.word	0x40010000
 8000d38:	40023800 	.word	0x40023800

08000d3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <HAL_TIM_MspPostInit+0x68>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d11e      	bne.n	8000d9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_TIM_MspPostInit+0x6c>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <HAL_TIM_MspPostInit+0x6c>)
 8000d68:	f043 0310 	orr.w	r3, r3, #16
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_TIM_MspPostInit+0x6c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0310 	and.w	r3, r3, #16
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	4619      	mov	r1, r3
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <HAL_TIM_MspPostInit+0x70>)
 8000d98:	f001 fac0 	bl	800231c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	3720      	adds	r7, #32
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40010000 	.word	0x40010000
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40021000 	.word	0x40021000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f8ac 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <ADC_IRQHandler+0x10>)
 8000e0a:	f000 f92c 	bl	8001066 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000028 	.word	0x20000028

08000e18 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000e1c:	2020      	movs	r0, #32
 8000e1e:	f001 fc33 	bl	8002688 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <DMA2_Stream0_IRQHandler+0x10>)
 8000e2e:	f001 f80b 	bl	8001e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000070 	.word	0x20000070

08000e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <SystemInit+0x20>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <SystemInit+0x20>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e66:	490e      	ldr	r1, [pc, #56]	; (8000ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e68:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e7c:	4c0b      	ldr	r4, [pc, #44]	; (8000eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e8a:	f7ff ffd7 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f002 fee5 	bl	8003c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e92:	f7ff fbff 	bl	8000694 <main>
  bx  lr    
 8000e96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ea4:	08003cf4 	.word	0x08003cf4
  ldr r2, =_sbss
 8000ea8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000eac:	20000130 	.word	0x20000130

08000eb0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <DMA1_Stream0_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <HAL_Init+0x40>)
 8000ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_Init+0x40>)
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <HAL_Init+0x40>)
 8000ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 fe6b 	bl	8001bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 f808 	bl	8000ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee8:	f7ff fe5e 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023c00 	.word	0x40023c00

08000ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_InitTick+0x54>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_InitTick+0x58>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fe83 	bl	8001c22 <HAL_SYSTICK_Config>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e00e      	b.n	8000f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b0f      	cmp	r3, #15
 8000f2a:	d80a      	bhi.n	8000f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	f000 fe4b 	bl	8001bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f38:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <HAL_InitTick+0x5c>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e000      	b.n	8000f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000004 	.word	0x20000004

08000f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x20>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <HAL_IncTick+0x24>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	2000012c 	.word	0x2000012c

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	2000012c 	.word	0x2000012c

08000f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff ffee 	bl	8000f80 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb0:	d005      	beq.n	8000fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_Delay+0x44>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4413      	add	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fbe:	bf00      	nop
 8000fc0:	f7ff ffde 	bl	8000f80 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d8f7      	bhi.n	8000fc0 <HAL_Delay+0x28>
  {
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008

08000fe0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e033      	b.n	800105e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d109      	bne.n	8001012 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fdfa 	bl	8000bf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f003 0310 	and.w	r3, r3, #16
 800101a:	2b00      	cmp	r3, #0
 800101c:	d118      	bne.n	8001050 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001026:	f023 0302 	bic.w	r3, r3, #2
 800102a:	f043 0202 	orr.w	r2, r3, #2
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 fb68 	bl	8001708 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f023 0303 	bic.w	r3, r3, #3
 8001046:	f043 0201 	orr.w	r2, r3, #1
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	641a      	str	r2, [r3, #64]	; 0x40
 800104e:	e001      	b.n	8001054 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	f003 0320 	and.w	r3, r3, #32
 8001094:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d049      	beq.n	8001130 <HAL_ADC_IRQHandler+0xca>
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d046      	beq.n	8001130 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d105      	bne.n	80010ba <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d12b      	bne.n	8001120 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d127      	bne.n	8001120 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d006      	beq.n	80010ec <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d119      	bne.n	8001120 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0220 	bic.w	r2, r2, #32
 80010fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d105      	bne.n	8001120 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f043 0201 	orr.w	r2, r3, #1
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff faa7 	bl	8000674 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f06f 0212 	mvn.w	r2, #18
 800112e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d057      	beq.n	80011f6 <HAL_ADC_IRQHandler+0x190>
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d054      	beq.n	80011f6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	2b00      	cmp	r3, #0
 8001156:	d105      	bne.n	8001164 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d139      	bne.n	80011e6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001178:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800117c:	2b00      	cmp	r3, #0
 800117e:	d006      	beq.n	800118e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800118a:	2b00      	cmp	r3, #0
 800118c:	d12b      	bne.n	80011e6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001198:	2b00      	cmp	r3, #0
 800119a:	d124      	bne.n	80011e6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d11d      	bne.n	80011e6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d119      	bne.n	80011e6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011c0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d105      	bne.n	80011e6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f043 0201 	orr.w	r2, r3, #1
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 fc0c 	bl	8001a04 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f06f 020c 	mvn.w	r2, #12
 80011f4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001204:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d017      	beq.n	800123c <HAL_ADC_IRQHandler+0x1d6>
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d014      	beq.n	800123c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b01      	cmp	r3, #1
 800121e:	d10d      	bne.n	800123c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f925 	bl	800147c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f06f 0201 	mvn.w	r2, #1
 800123a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0320 	and.w	r3, r3, #32
 8001242:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800124a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d015      	beq.n	800127e <HAL_ADC_IRQHandler+0x218>
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d012      	beq.n	800127e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125c:	f043 0202 	orr.w	r2, r3, #2
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f06f 0220 	mvn.w	r2, #32
 800126c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f90e 	bl	8001490 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f06f 0220 	mvn.w	r2, #32
 800127c:	601a      	str	r2, [r3, #0]
  }
}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d101      	bne.n	80012a6 <HAL_ADC_Start_DMA+0x1e>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e0ce      	b.n	8001444 <HAL_ADC_Start_DMA+0x1bc>
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d018      	beq.n	80012ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0201 	orr.w	r2, r2, #1
 80012ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012cc:	4b5f      	ldr	r3, [pc, #380]	; (800144c <HAL_ADC_Start_DMA+0x1c4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a5f      	ldr	r2, [pc, #380]	; (8001450 <HAL_ADC_Start_DMA+0x1c8>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	0c9a      	lsrs	r2, r3, #18
 80012d8:	4613      	mov	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012e0:	e002      	b.n	80012e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f9      	bne.n	80012e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012fc:	d107      	bne.n	800130e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800130c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	2b01      	cmp	r3, #1
 800131a:	f040 8086 	bne.w	800142a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001326:	f023 0301 	bic.w	r3, r3, #1
 800132a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133c:	2b00      	cmp	r3, #0
 800133e:	d007      	beq.n	8001350 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001348:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800135c:	d106      	bne.n	800136c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f023 0206 	bic.w	r2, r3, #6
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	645a      	str	r2, [r3, #68]	; 0x44
 800136a:	e002      	b.n	8001372 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800137a:	4b36      	ldr	r3, [pc, #216]	; (8001454 <HAL_ADC_Start_DMA+0x1cc>)
 800137c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001382:	4a35      	ldr	r2, [pc, #212]	; (8001458 <HAL_ADC_Start_DMA+0x1d0>)
 8001384:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138a:	4a34      	ldr	r2, [pc, #208]	; (800145c <HAL_ADC_Start_DMA+0x1d4>)
 800138c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001392:	4a33      	ldr	r2, [pc, #204]	; (8001460 <HAL_ADC_Start_DMA+0x1d8>)
 8001394:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800139e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80013ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	334c      	adds	r3, #76	; 0x4c
 80013ca:	4619      	mov	r1, r3
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f000 fce2 	bl	8001d98 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 031f 	and.w	r3, r3, #31
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10f      	bne.n	8001400 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d129      	bne.n	8001442 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	e020      	b.n	8001442 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a17      	ldr	r2, [pc, #92]	; (8001464 <HAL_ADC_Start_DMA+0x1dc>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d11b      	bne.n	8001442 <HAL_ADC_Start_DMA+0x1ba>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d114      	bne.n	8001442 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	e00b      	b.n	8001442 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f043 0210 	orr.w	r2, r3, #16
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f043 0201 	orr.w	r2, r3, #1
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000000 	.word	0x20000000
 8001450:	431bde83 	.word	0x431bde83
 8001454:	40012300 	.word	0x40012300
 8001458:	08001901 	.word	0x08001901
 800145c:	080019bb 	.word	0x080019bb
 8001460:	080019d7 	.word	0x080019d7
 8001464:	40012000 	.word	0x40012000

08001468 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x1c>
 80014bc:	2302      	movs	r3, #2
 80014be:	e113      	b.n	80016e8 <HAL_ADC_ConfigChannel+0x244>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b09      	cmp	r3, #9
 80014ce:	d925      	bls.n	800151c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68d9      	ldr	r1, [r3, #12]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	4613      	mov	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4413      	add	r3, r2
 80014e4:	3b1e      	subs	r3, #30
 80014e6:	2207      	movs	r2, #7
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43da      	mvns	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	400a      	ands	r2, r1
 80014f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68d9      	ldr	r1, [r3, #12]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	b29b      	uxth	r3, r3
 8001506:	4618      	mov	r0, r3
 8001508:	4603      	mov	r3, r0
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4403      	add	r3, r0
 800150e:	3b1e      	subs	r3, #30
 8001510:	409a      	lsls	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	e022      	b.n	8001562 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6919      	ldr	r1, [r3, #16]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	2207      	movs	r2, #7
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	400a      	ands	r2, r1
 800153e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6919      	ldr	r1, [r3, #16]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	b29b      	uxth	r3, r3
 8001550:	4618      	mov	r0, r3
 8001552:	4603      	mov	r3, r0
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4403      	add	r3, r0
 8001558:	409a      	lsls	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b06      	cmp	r3, #6
 8001568:	d824      	bhi.n	80015b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	3b05      	subs	r3, #5
 800157c:	221f      	movs	r2, #31
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	400a      	ands	r2, r1
 800158a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	b29b      	uxth	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	3b05      	subs	r3, #5
 80015a6:	fa00 f203 	lsl.w	r2, r0, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
 80015b2:	e04c      	b.n	800164e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b0c      	cmp	r3, #12
 80015ba:	d824      	bhi.n	8001606 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	3b23      	subs	r3, #35	; 0x23
 80015ce:	221f      	movs	r2, #31
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43da      	mvns	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	400a      	ands	r2, r1
 80015dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	3b23      	subs	r3, #35	; 0x23
 80015f8:	fa00 f203 	lsl.w	r2, r0, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	631a      	str	r2, [r3, #48]	; 0x30
 8001604:	e023      	b.n	800164e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	3b41      	subs	r3, #65	; 0x41
 8001618:	221f      	movs	r2, #31
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	400a      	ands	r2, r1
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	b29b      	uxth	r3, r3
 8001634:	4618      	mov	r0, r3
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	3b41      	subs	r3, #65	; 0x41
 8001642:	fa00 f203 	lsl.w	r2, r0, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800164e:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <HAL_ADC_ConfigChannel+0x250>)
 8001650:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a28      	ldr	r2, [pc, #160]	; (80016f8 <HAL_ADC_ConfigChannel+0x254>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d10f      	bne.n	800167c <HAL_ADC_ConfigChannel+0x1d8>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b12      	cmp	r3, #18
 8001662:	d10b      	bne.n	800167c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a1d      	ldr	r2, [pc, #116]	; (80016f8 <HAL_ADC_ConfigChannel+0x254>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d12b      	bne.n	80016de <HAL_ADC_ConfigChannel+0x23a>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a1c      	ldr	r2, [pc, #112]	; (80016fc <HAL_ADC_ConfigChannel+0x258>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d003      	beq.n	8001698 <HAL_ADC_ConfigChannel+0x1f4>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b11      	cmp	r3, #17
 8001696:	d122      	bne.n	80016de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a11      	ldr	r2, [pc, #68]	; (80016fc <HAL_ADC_ConfigChannel+0x258>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d111      	bne.n	80016de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_ADC_ConfigChannel+0x25c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a11      	ldr	r2, [pc, #68]	; (8001704 <HAL_ADC_ConfigChannel+0x260>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	0c9a      	lsrs	r2, r3, #18
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016d0:	e002      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f9      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40012300 	.word	0x40012300
 80016f8:	40012000 	.word	0x40012000
 80016fc:	10000012 	.word	0x10000012
 8001700:	20000000 	.word	0x20000000
 8001704:	431bde83 	.word	0x431bde83

08001708 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001710:	4b79      	ldr	r3, [pc, #484]	; (80018f8 <ADC_Init+0x1f0>)
 8001712:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	431a      	orrs	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800173c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	021a      	lsls	r2, r3, #8
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001760:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6859      	ldr	r1, [r3, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001782:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6899      	ldr	r1, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	4a58      	ldr	r2, [pc, #352]	; (80018fc <ADC_Init+0x1f4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d022      	beq.n	80017e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6899      	ldr	r1, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6899      	ldr	r1, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	e00f      	b.n	8001806 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001804:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0202 	bic.w	r2, r2, #2
 8001814:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6899      	ldr	r1, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7e1b      	ldrb	r3, [r3, #24]
 8001820:	005a      	lsls	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01b      	beq.n	800186c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001842:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001852:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6859      	ldr	r1, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	3b01      	subs	r3, #1
 8001860:	035a      	lsls	r2, r3, #13
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	e007      	b.n	800187c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800187a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	3b01      	subs	r3, #1
 8001898:	051a      	lsls	r2, r3, #20
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6899      	ldr	r1, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018be:	025a      	lsls	r2, r3, #9
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6899      	ldr	r1, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	029a      	lsls	r2, r3, #10
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	609a      	str	r2, [r3, #8]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	40012300 	.word	0x40012300
 80018fc:	0f000001 	.word	0x0f000001

08001900 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001916:	2b00      	cmp	r3, #0
 8001918:	d13c      	bne.n	8001994 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d12b      	bne.n	800198c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001938:	2b00      	cmp	r3, #0
 800193a:	d127      	bne.n	800198c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001942:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001946:	2b00      	cmp	r3, #0
 8001948:	d006      	beq.n	8001958 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001954:	2b00      	cmp	r3, #0
 8001956:	d119      	bne.n	800198c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0220 	bic.w	r2, r2, #32
 8001966:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d105      	bne.n	800198c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f043 0201 	orr.w	r2, r3, #1
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f7fe fe71 	bl	8000674 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001992:	e00e      	b.n	80019b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f7ff fd75 	bl	8001490 <HAL_ADC_ErrorCallback>
}
 80019a6:	e004      	b.n	80019b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	4798      	blx	r3
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b084      	sub	sp, #16
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f7ff fd4d 	bl	8001468 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2240      	movs	r2, #64	; 0x40
 80019e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f043 0204 	orr.w	r2, r3, #4
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7ff fd4a 	bl	8001490 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a34:	4013      	ands	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <__NVIC_GetPriorityGrouping+0x18>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	f003 0307 	and.w	r3, r3, #7
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	db0b      	blt.n	8001aa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	f003 021f 	and.w	r2, r3, #31
 8001a94:	4907      	ldr	r1, [pc, #28]	; (8001ab4 <__NVIC_EnableIRQ+0x38>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	095b      	lsrs	r3, r3, #5
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000e100 	.word	0xe000e100

08001ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	db0a      	blt.n	8001ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	490c      	ldr	r1, [pc, #48]	; (8001b04 <__NVIC_SetPriority+0x4c>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	0112      	lsls	r2, r2, #4
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	440b      	add	r3, r1
 8001adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae0:	e00a      	b.n	8001af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4908      	ldr	r1, [pc, #32]	; (8001b08 <__NVIC_SetPriority+0x50>)
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	3b04      	subs	r3, #4
 8001af0:	0112      	lsls	r2, r2, #4
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	440b      	add	r3, r1
 8001af6:	761a      	strb	r2, [r3, #24]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000e100 	.word	0xe000e100
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	; 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f1c3 0307 	rsb	r3, r3, #7
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	bf28      	it	cs
 8001b2a:	2304      	movcs	r3, #4
 8001b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3304      	adds	r3, #4
 8001b32:	2b06      	cmp	r3, #6
 8001b34:	d902      	bls.n	8001b3c <NVIC_EncodePriority+0x30>
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3b03      	subs	r3, #3
 8001b3a:	e000      	b.n	8001b3e <NVIC_EncodePriority+0x32>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	f04f 32ff 	mov.w	r2, #4294967295
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	401a      	ands	r2, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b54:	f04f 31ff 	mov.w	r1, #4294967295
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	43d9      	mvns	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	4313      	orrs	r3, r2
         );
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3724      	adds	r7, #36	; 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b84:	d301      	bcc.n	8001b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00f      	b.n	8001baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <SysTick_Config+0x40>)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b92:	210f      	movs	r1, #15
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f7ff ff8e 	bl	8001ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <SysTick_Config+0x40>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba2:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <SysTick_Config+0x40>)
 8001ba4:	2207      	movs	r2, #7
 8001ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	e000e010 	.word	0xe000e010

08001bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ff29 	bl	8001a18 <__NVIC_SetPriorityGrouping>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be0:	f7ff ff3e 	bl	8001a60 <__NVIC_GetPriorityGrouping>
 8001be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	6978      	ldr	r0, [r7, #20]
 8001bec:	f7ff ff8e 	bl	8001b0c <NVIC_EncodePriority>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff5d 	bl	8001ab8 <__NVIC_SetPriority>
}
 8001bfe:	bf00      	nop
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff31 	bl	8001a7c <__NVIC_EnableIRQ>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ffa2 	bl	8001b74 <SysTick_Config>
 8001c30:	4603      	mov	r3, r0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff f99a 	bl	8000f80 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e099      	b.n	8001d8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c78:	e00f      	b.n	8001c9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c7a:	f7ff f981 	bl	8000f80 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b05      	cmp	r3, #5
 8001c86:	d908      	bls.n	8001c9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2203      	movs	r2, #3
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e078      	b.n	8001d8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1e8      	bne.n	8001c7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	4b38      	ldr	r3, [pc, #224]	; (8001d94 <HAL_DMA_Init+0x158>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d107      	bne.n	8001d04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f023 0307 	bic.w	r3, r3, #7
 8001d1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d117      	bne.n	8001d5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00e      	beq.n	8001d5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 fa6f 	bl	8002224 <DMA_CheckFifoParam>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2240      	movs	r2, #64	; 0x40
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e016      	b.n	8001d8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fa26 	bl	80021b8 <DMA_CalcBaseAndBitshift>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	223f      	movs	r2, #63	; 0x3f
 8001d76:	409a      	lsls	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	f010803f 	.word	0xf010803f

08001d98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_DMA_Start_IT+0x26>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e040      	b.n	8001e40 <HAL_DMA_Start_IT+0xa8>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d12f      	bne.n	8001e32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f9b8 	bl	800215c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	223f      	movs	r2, #63	; 0x3f
 8001df2:	409a      	lsls	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0216 	orr.w	r2, r2, #22
 8001e06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d007      	beq.n	8001e20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0208 	orr.w	r2, r2, #8
 8001e1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	e005      	b.n	8001e3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e54:	4b8e      	ldr	r3, [pc, #568]	; (8002090 <HAL_DMA_IRQHandler+0x248>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a8e      	ldr	r2, [pc, #568]	; (8002094 <HAL_DMA_IRQHandler+0x24c>)
 8001e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5e:	0a9b      	lsrs	r3, r3, #10
 8001e60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	2208      	movs	r2, #8
 8001e74:	409a      	lsls	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d01a      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d013      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0204 	bic.w	r2, r2, #4
 8001e9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	f043 0201 	orr.w	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb8:	2201      	movs	r2, #1
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d012      	beq.n	8001eea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00b      	beq.n	8001eea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee2:	f043 0202 	orr.w	r2, r3, #2
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	2204      	movs	r2, #4
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d012      	beq.n	8001f20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00b      	beq.n	8001f20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	f043 0204 	orr.w	r2, r3, #4
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	2210      	movs	r2, #16
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d043      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d03c      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	2210      	movs	r2, #16
 8001f44:	409a      	lsls	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d018      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d108      	bne.n	8001f78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d024      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4798      	blx	r3
 8001f76:	e01f      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01b      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	4798      	blx	r3
 8001f88:	e016      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d107      	bne.n	8001fa8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0208 	bic.w	r2, r2, #8
 8001fa6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 808f 	beq.w	80020e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 8087 	beq.w	80020e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fde:	2220      	movs	r2, #32
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b05      	cmp	r3, #5
 8001ff0:	d136      	bne.n	8002060 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0216 	bic.w	r2, r2, #22
 8002000:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002010:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d103      	bne.n	8002022 <HAL_DMA_IRQHandler+0x1da>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0208 	bic.w	r2, r2, #8
 8002030:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	223f      	movs	r2, #63	; 0x3f
 8002038:	409a      	lsls	r2, r3
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002052:	2b00      	cmp	r3, #0
 8002054:	d07e      	beq.n	8002154 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	4798      	blx	r3
        }
        return;
 800205e:	e079      	b.n	8002154 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d01d      	beq.n	80020aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10d      	bne.n	8002098 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002080:	2b00      	cmp	r3, #0
 8002082:	d031      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	4798      	blx	r3
 800208c:	e02c      	b.n	80020e8 <HAL_DMA_IRQHandler+0x2a0>
 800208e:	bf00      	nop
 8002090:	20000000 	.word	0x20000000
 8002094:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209c:	2b00      	cmp	r3, #0
 800209e:	d023      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	4798      	blx	r3
 80020a8:	e01e      	b.n	80020e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10f      	bne.n	80020d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0210 	bic.w	r2, r2, #16
 80020c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d032      	beq.n	8002156 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d022      	beq.n	8002142 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2205      	movs	r2, #5
 8002100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	3301      	adds	r3, #1
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	429a      	cmp	r2, r3
 800211e:	d307      	bcc.n	8002130 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f2      	bne.n	8002114 <HAL_DMA_IRQHandler+0x2cc>
 800212e:	e000      	b.n	8002132 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002130:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	4798      	blx	r3
 8002152:	e000      	b.n	8002156 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002154:	bf00      	nop
    }
  }
}
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002178:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b40      	cmp	r3, #64	; 0x40
 8002188:	d108      	bne.n	800219c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800219a:	e007      	b.n	80021ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	60da      	str	r2, [r3, #12]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	3b10      	subs	r3, #16
 80021c8:	4a14      	ldr	r2, [pc, #80]	; (800221c <DMA_CalcBaseAndBitshift+0x64>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	091b      	lsrs	r3, r3, #4
 80021d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021d2:	4a13      	ldr	r2, [pc, #76]	; (8002220 <DMA_CalcBaseAndBitshift+0x68>)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4413      	add	r3, r2
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d909      	bls.n	80021fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021ee:	f023 0303 	bic.w	r3, r3, #3
 80021f2:	1d1a      	adds	r2, r3, #4
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	659a      	str	r2, [r3, #88]	; 0x58
 80021f8:	e007      	b.n	800220a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002202:	f023 0303 	bic.w	r3, r3, #3
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	aaaaaaab 	.word	0xaaaaaaab
 8002220:	08003cdc 	.word	0x08003cdc

08002224 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d11f      	bne.n	800227e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d856      	bhi.n	80022f2 <DMA_CheckFifoParam+0xce>
 8002244:	a201      	add	r2, pc, #4	; (adr r2, 800224c <DMA_CheckFifoParam+0x28>)
 8002246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224a:	bf00      	nop
 800224c:	0800225d 	.word	0x0800225d
 8002250:	0800226f 	.word	0x0800226f
 8002254:	0800225d 	.word	0x0800225d
 8002258:	080022f3 	.word	0x080022f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d046      	beq.n	80022f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800226c:	e043      	b.n	80022f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002276:	d140      	bne.n	80022fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800227c:	e03d      	b.n	80022fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002286:	d121      	bne.n	80022cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b03      	cmp	r3, #3
 800228c:	d837      	bhi.n	80022fe <DMA_CheckFifoParam+0xda>
 800228e:	a201      	add	r2, pc, #4	; (adr r2, 8002294 <DMA_CheckFifoParam+0x70>)
 8002290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002294:	080022a5 	.word	0x080022a5
 8002298:	080022ab 	.word	0x080022ab
 800229c:	080022a5 	.word	0x080022a5
 80022a0:	080022bd 	.word	0x080022bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
      break;
 80022a8:	e030      	b.n	800230c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d025      	beq.n	8002302 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022ba:	e022      	b.n	8002302 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022c4:	d11f      	bne.n	8002306 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022ca:	e01c      	b.n	8002306 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d903      	bls.n	80022da <DMA_CheckFifoParam+0xb6>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d003      	beq.n	80022e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022d8:	e018      	b.n	800230c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	73fb      	strb	r3, [r7, #15]
      break;
 80022de:	e015      	b.n	800230c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00e      	beq.n	800230a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
      break;
 80022f0:	e00b      	b.n	800230a <DMA_CheckFifoParam+0xe6>
      break;
 80022f2:	bf00      	nop
 80022f4:	e00a      	b.n	800230c <DMA_CheckFifoParam+0xe8>
      break;
 80022f6:	bf00      	nop
 80022f8:	e008      	b.n	800230c <DMA_CheckFifoParam+0xe8>
      break;
 80022fa:	bf00      	nop
 80022fc:	e006      	b.n	800230c <DMA_CheckFifoParam+0xe8>
      break;
 80022fe:	bf00      	nop
 8002300:	e004      	b.n	800230c <DMA_CheckFifoParam+0xe8>
      break;
 8002302:	bf00      	nop
 8002304:	e002      	b.n	800230c <DMA_CheckFifoParam+0xe8>
      break;   
 8002306:	bf00      	nop
 8002308:	e000      	b.n	800230c <DMA_CheckFifoParam+0xe8>
      break;
 800230a:	bf00      	nop
    }
  } 
  
  return status; 
 800230c:	7bfb      	ldrb	r3, [r7, #15]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop

0800231c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	e159      	b.n	80025ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002338:	2201      	movs	r2, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	429a      	cmp	r2, r3
 8002352:	f040 8148 	bne.w	80025e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d005      	beq.n	800236e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800236a:	2b02      	cmp	r3, #2
 800236c:	d130      	bne.n	80023d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	2203      	movs	r2, #3
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023a4:	2201      	movs	r2, #1
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 0201 	and.w	r2, r3, #1
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d017      	beq.n	800240c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	2203      	movs	r2, #3
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d123      	bne.n	8002460 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	08da      	lsrs	r2, r3, #3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3208      	adds	r2, #8
 8002420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	220f      	movs	r2, #15
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	08da      	lsrs	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3208      	adds	r2, #8
 800245a:	69b9      	ldr	r1, [r7, #24]
 800245c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	2203      	movs	r2, #3
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0203 	and.w	r2, r3, #3
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80a2 	beq.w	80025e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	4b57      	ldr	r3, [pc, #348]	; (8002604 <HAL_GPIO_Init+0x2e8>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	4a56      	ldr	r2, [pc, #344]	; (8002604 <HAL_GPIO_Init+0x2e8>)
 80024ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b0:	6453      	str	r3, [r2, #68]	; 0x44
 80024b2:	4b54      	ldr	r3, [pc, #336]	; (8002604 <HAL_GPIO_Init+0x2e8>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024be:	4a52      	ldr	r2, [pc, #328]	; (8002608 <HAL_GPIO_Init+0x2ec>)
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3302      	adds	r3, #2
 80024c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	220f      	movs	r2, #15
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a49      	ldr	r2, [pc, #292]	; (800260c <HAL_GPIO_Init+0x2f0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d019      	beq.n	800251e <HAL_GPIO_Init+0x202>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a48      	ldr	r2, [pc, #288]	; (8002610 <HAL_GPIO_Init+0x2f4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d013      	beq.n	800251a <HAL_GPIO_Init+0x1fe>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a47      	ldr	r2, [pc, #284]	; (8002614 <HAL_GPIO_Init+0x2f8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00d      	beq.n	8002516 <HAL_GPIO_Init+0x1fa>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a46      	ldr	r2, [pc, #280]	; (8002618 <HAL_GPIO_Init+0x2fc>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d007      	beq.n	8002512 <HAL_GPIO_Init+0x1f6>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a45      	ldr	r2, [pc, #276]	; (800261c <HAL_GPIO_Init+0x300>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <HAL_GPIO_Init+0x1f2>
 800250a:	2304      	movs	r3, #4
 800250c:	e008      	b.n	8002520 <HAL_GPIO_Init+0x204>
 800250e:	2307      	movs	r3, #7
 8002510:	e006      	b.n	8002520 <HAL_GPIO_Init+0x204>
 8002512:	2303      	movs	r3, #3
 8002514:	e004      	b.n	8002520 <HAL_GPIO_Init+0x204>
 8002516:	2302      	movs	r3, #2
 8002518:	e002      	b.n	8002520 <HAL_GPIO_Init+0x204>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_GPIO_Init+0x204>
 800251e:	2300      	movs	r3, #0
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	f002 0203 	and.w	r2, r2, #3
 8002526:	0092      	lsls	r2, r2, #2
 8002528:	4093      	lsls	r3, r2
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002530:	4935      	ldr	r1, [pc, #212]	; (8002608 <HAL_GPIO_Init+0x2ec>)
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	089b      	lsrs	r3, r3, #2
 8002536:	3302      	adds	r3, #2
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800253e:	4b38      	ldr	r3, [pc, #224]	; (8002620 <HAL_GPIO_Init+0x304>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002562:	4a2f      	ldr	r2, [pc, #188]	; (8002620 <HAL_GPIO_Init+0x304>)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002568:	4b2d      	ldr	r3, [pc, #180]	; (8002620 <HAL_GPIO_Init+0x304>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800258c:	4a24      	ldr	r2, [pc, #144]	; (8002620 <HAL_GPIO_Init+0x304>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002592:	4b23      	ldr	r3, [pc, #140]	; (8002620 <HAL_GPIO_Init+0x304>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025b6:	4a1a      	ldr	r2, [pc, #104]	; (8002620 <HAL_GPIO_Init+0x304>)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025bc:	4b18      	ldr	r3, [pc, #96]	; (8002620 <HAL_GPIO_Init+0x304>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025e0:	4a0f      	ldr	r2, [pc, #60]	; (8002620 <HAL_GPIO_Init+0x304>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3301      	adds	r3, #1
 80025ea:	61fb      	str	r3, [r7, #28]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2b0f      	cmp	r3, #15
 80025f0:	f67f aea2 	bls.w	8002338 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025f4:	bf00      	nop
 80025f6:	bf00      	nop
 80025f8:	3724      	adds	r7, #36	; 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	40013800 	.word	0x40013800
 800260c:	40020000 	.word	0x40020000
 8002610:	40020400 	.word	0x40020400
 8002614:	40020800 	.word	0x40020800
 8002618:	40020c00 	.word	0x40020c00
 800261c:	40021000 	.word	0x40021000
 8002620:	40013c00 	.word	0x40013c00

08002624 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	887b      	ldrh	r3, [r7, #2]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	e001      	b.n	8002646 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	807b      	strh	r3, [r7, #2]
 8002660:	4613      	mov	r3, r2
 8002662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002664:	787b      	ldrb	r3, [r7, #1]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800266a:	887a      	ldrh	r2, [r7, #2]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002670:	e003      	b.n	800267a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002672:	887b      	ldrh	r3, [r7, #2]
 8002674:	041a      	lsls	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	619a      	str	r2, [r3, #24]
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d006      	beq.n	80026ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800269e:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fd ffb0 	bl	800060c <HAL_GPIO_EXTI_Callback>
  }
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40013c00 	.word	0x40013c00

080026b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e267      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d075      	beq.n	80027c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026d6:	4b88      	ldr	r3, [pc, #544]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d00c      	beq.n	80026fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e2:	4b85      	ldr	r3, [pc, #532]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d112      	bne.n	8002714 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ee:	4b82      	ldr	r3, [pc, #520]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026fa:	d10b      	bne.n	8002714 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	4b7e      	ldr	r3, [pc, #504]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d05b      	beq.n	80027c0 <HAL_RCC_OscConfig+0x108>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d157      	bne.n	80027c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e242      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271c:	d106      	bne.n	800272c <HAL_RCC_OscConfig+0x74>
 800271e:	4b76      	ldr	r3, [pc, #472]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a75      	ldr	r2, [pc, #468]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e01d      	b.n	8002768 <HAL_RCC_OscConfig+0xb0>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0x98>
 8002736:	4b70      	ldr	r3, [pc, #448]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a6f      	ldr	r2, [pc, #444]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 800273c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4b6d      	ldr	r3, [pc, #436]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a6c      	ldr	r2, [pc, #432]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e00b      	b.n	8002768 <HAL_RCC_OscConfig+0xb0>
 8002750:	4b69      	ldr	r3, [pc, #420]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a68      	ldr	r2, [pc, #416]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	4b66      	ldr	r3, [pc, #408]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a65      	ldr	r2, [pc, #404]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d013      	beq.n	8002798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7fe fc06 	bl	8000f80 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002778:	f7fe fc02 	bl	8000f80 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	; 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e207      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	4b5b      	ldr	r3, [pc, #364]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0xc0>
 8002796:	e014      	b.n	80027c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe fbf2 	bl	8000f80 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a0:	f7fe fbee 	bl	8000f80 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	; 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e1f3      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b2:	4b51      	ldr	r3, [pc, #324]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0xe8>
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d063      	beq.n	8002896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ce:	4b4a      	ldr	r3, [pc, #296]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00b      	beq.n	80027f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027da:	4b47      	ldr	r3, [pc, #284]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d11c      	bne.n	8002820 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e6:	4b44      	ldr	r3, [pc, #272]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d116      	bne.n	8002820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	4b41      	ldr	r3, [pc, #260]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_RCC_OscConfig+0x152>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d001      	beq.n	800280a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e1c7      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280a:	4b3b      	ldr	r3, [pc, #236]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4937      	ldr	r1, [pc, #220]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281e:	e03a      	b.n	8002896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d020      	beq.n	800286a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002828:	4b34      	ldr	r3, [pc, #208]	; (80028fc <HAL_RCC_OscConfig+0x244>)
 800282a:	2201      	movs	r2, #1
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7fe fba7 	bl	8000f80 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002836:	f7fe fba3 	bl	8000f80 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e1a8      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002848:	4b2b      	ldr	r3, [pc, #172]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4925      	ldr	r1, [pc, #148]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002864:	4313      	orrs	r3, r2
 8002866:	600b      	str	r3, [r1, #0]
 8002868:	e015      	b.n	8002896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286a:	4b24      	ldr	r3, [pc, #144]	; (80028fc <HAL_RCC_OscConfig+0x244>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe fb86 	bl	8000f80 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002878:	f7fe fb82 	bl	8000f80 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e187      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288a:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d036      	beq.n	8002910 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d016      	beq.n	80028d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_RCC_OscConfig+0x248>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7fe fb66 	bl	8000f80 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b8:	f7fe fb62 	bl	8000f80 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e167      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ca:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80028cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x200>
 80028d6:	e01b      	b.n	8002910 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d8:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_RCC_OscConfig+0x248>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028de:	f7fe fb4f 	bl	8000f80 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e4:	e00e      	b.n	8002904 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e6:	f7fe fb4b 	bl	8000f80 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d907      	bls.n	8002904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e150      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
 80028f8:	40023800 	.word	0x40023800
 80028fc:	42470000 	.word	0x42470000
 8002900:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002904:	4b88      	ldr	r3, [pc, #544]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1ea      	bne.n	80028e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8097 	beq.w	8002a4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002922:	4b81      	ldr	r3, [pc, #516]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10f      	bne.n	800294e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	4b7d      	ldr	r3, [pc, #500]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a7c      	ldr	r2, [pc, #496]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	4b7a      	ldr	r3, [pc, #488]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800294a:	2301      	movs	r3, #1
 800294c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294e:	4b77      	ldr	r3, [pc, #476]	; (8002b2c <HAL_RCC_OscConfig+0x474>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d118      	bne.n	800298c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800295a:	4b74      	ldr	r3, [pc, #464]	; (8002b2c <HAL_RCC_OscConfig+0x474>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a73      	ldr	r2, [pc, #460]	; (8002b2c <HAL_RCC_OscConfig+0x474>)
 8002960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002966:	f7fe fb0b 	bl	8000f80 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296e:	f7fe fb07 	bl	8000f80 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e10c      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	4b6a      	ldr	r3, [pc, #424]	; (8002b2c <HAL_RCC_OscConfig+0x474>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d106      	bne.n	80029a2 <HAL_RCC_OscConfig+0x2ea>
 8002994:	4b64      	ldr	r3, [pc, #400]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002998:	4a63      	ldr	r2, [pc, #396]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6713      	str	r3, [r2, #112]	; 0x70
 80029a0:	e01c      	b.n	80029dc <HAL_RCC_OscConfig+0x324>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b05      	cmp	r3, #5
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x30c>
 80029aa:	4b5f      	ldr	r3, [pc, #380]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	4a5e      	ldr	r2, [pc, #376]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	6713      	str	r3, [r2, #112]	; 0x70
 80029b6:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ba:	4a5b      	ldr	r2, [pc, #364]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6713      	str	r3, [r2, #112]	; 0x70
 80029c2:	e00b      	b.n	80029dc <HAL_RCC_OscConfig+0x324>
 80029c4:	4b58      	ldr	r3, [pc, #352]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c8:	4a57      	ldr	r2, [pc, #348]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029ca:	f023 0301 	bic.w	r3, r3, #1
 80029ce:	6713      	str	r3, [r2, #112]	; 0x70
 80029d0:	4b55      	ldr	r3, [pc, #340]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	4a54      	ldr	r2, [pc, #336]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029d6:	f023 0304 	bic.w	r3, r3, #4
 80029da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d015      	beq.n	8002a10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7fe facc 	bl	8000f80 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7fe fac8 	bl	8000f80 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e0cb      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a02:	4b49      	ldr	r3, [pc, #292]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0ee      	beq.n	80029ec <HAL_RCC_OscConfig+0x334>
 8002a0e:	e014      	b.n	8002a3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a10:	f7fe fab6 	bl	8000f80 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a18:	f7fe fab2 	bl	8000f80 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e0b5      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2e:	4b3e      	ldr	r3, [pc, #248]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1ee      	bne.n	8002a18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a3a:	7dfb      	ldrb	r3, [r7, #23]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a40:	4b39      	ldr	r3, [pc, #228]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	4a38      	ldr	r2, [pc, #224]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 80a1 	beq.w	8002b98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a56:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d05c      	beq.n	8002b1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d141      	bne.n	8002aee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6a:	4b31      	ldr	r3, [pc, #196]	; (8002b30 <HAL_RCC_OscConfig+0x478>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe fa86 	bl	8000f80 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a78:	f7fe fa82 	bl	8000f80 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e087      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69da      	ldr	r2, [r3, #28]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	019b      	lsls	r3, r3, #6
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	085b      	lsrs	r3, r3, #1
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	041b      	lsls	r3, r3, #16
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	491b      	ldr	r1, [pc, #108]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <HAL_RCC_OscConfig+0x478>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7fe fa5b 	bl	8000f80 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ace:	f7fe fa57 	bl	8000f80 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e05c      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae0:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x416>
 8002aec:	e054      	b.n	8002b98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <HAL_RCC_OscConfig+0x478>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7fe fa44 	bl	8000f80 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002afc:	f7fe fa40 	bl	8000f80 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e045      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0e:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x444>
 8002b1a:	e03d      	b.n	8002b98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e038      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40007000 	.word	0x40007000
 8002b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b34:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <HAL_RCC_OscConfig+0x4ec>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d028      	beq.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d121      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d11a      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b64:	4013      	ands	r3, r2
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d111      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800

08002ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0cc      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b68      	ldr	r3, [pc, #416]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d90c      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b65      	ldr	r3, [pc, #404]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b63      	ldr	r3, [pc, #396]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0b8      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d020      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bfc:	4b59      	ldr	r3, [pc, #356]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4a58      	ldr	r2, [pc, #352]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c14:	4b53      	ldr	r3, [pc, #332]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4a52      	ldr	r2, [pc, #328]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c20:	4b50      	ldr	r3, [pc, #320]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	494d      	ldr	r1, [pc, #308]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d044      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d107      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d119      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e07f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d107      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c66:	4b3f      	ldr	r3, [pc, #252]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e06f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c76:	4b3b      	ldr	r3, [pc, #236]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e067      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c86:	4b37      	ldr	r3, [pc, #220]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f023 0203 	bic.w	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4934      	ldr	r1, [pc, #208]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c98:	f7fe f972 	bl	8000f80 <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca0:	f7fe f96e 	bl	8000f80 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e04f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 020c 	and.w	r2, r3, #12
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d1eb      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d20c      	bcs.n	8002cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e032      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cfc:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4916      	ldr	r1, [pc, #88]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	490e      	ldr	r1, [pc, #56]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d2e:	f000 f821 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8002d32:	4602      	mov	r2, r0
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	490a      	ldr	r1, [pc, #40]	; (8002d68 <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	5ccb      	ldrb	r3, [r1, r3]
 8002d42:	fa22 f303 	lsr.w	r3, r2, r3
 8002d46:	4a09      	ldr	r2, [pc, #36]	; (8002d6c <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe f8d2 	bl	8000ef8 <HAL_InitTick>

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023c00 	.word	0x40023c00
 8002d64:	40023800 	.word	0x40023800
 8002d68:	08003ccc 	.word	0x08003ccc
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	20000004 	.word	0x20000004

08002d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d78:	b094      	sub	sp, #80	; 0x50
 8002d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d80:	2300      	movs	r3, #0
 8002d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d84:	2300      	movs	r3, #0
 8002d86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d8c:	4b79      	ldr	r3, [pc, #484]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d00d      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x40>
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	f200 80e1 	bhi.w	8002f60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x34>
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0x3a>
 8002da6:	e0db      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da8:	4b73      	ldr	r3, [pc, #460]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x204>)
 8002daa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002dac:	e0db      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dae:	4b73      	ldr	r3, [pc, #460]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x208>)
 8002db0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002db2:	e0d8      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db4:	4b6f      	ldr	r3, [pc, #444]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dbc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dbe:	4b6d      	ldr	r3, [pc, #436]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d063      	beq.n	8002e92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dca:	4b6a      	ldr	r3, [pc, #424]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	099b      	lsrs	r3, r3, #6
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ddc:	633b      	str	r3, [r7, #48]	; 0x30
 8002dde:	2300      	movs	r3, #0
 8002de0:	637b      	str	r3, [r7, #52]	; 0x34
 8002de2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002de6:	4622      	mov	r2, r4
 8002de8:	462b      	mov	r3, r5
 8002dea:	f04f 0000 	mov.w	r0, #0
 8002dee:	f04f 0100 	mov.w	r1, #0
 8002df2:	0159      	lsls	r1, r3, #5
 8002df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df8:	0150      	lsls	r0, r2, #5
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4621      	mov	r1, r4
 8002e00:	1a51      	subs	r1, r2, r1
 8002e02:	6139      	str	r1, [r7, #16]
 8002e04:	4629      	mov	r1, r5
 8002e06:	eb63 0301 	sbc.w	r3, r3, r1
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e18:	4659      	mov	r1, fp
 8002e1a:	018b      	lsls	r3, r1, #6
 8002e1c:	4651      	mov	r1, sl
 8002e1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e22:	4651      	mov	r1, sl
 8002e24:	018a      	lsls	r2, r1, #6
 8002e26:	4651      	mov	r1, sl
 8002e28:	ebb2 0801 	subs.w	r8, r2, r1
 8002e2c:	4659      	mov	r1, fp
 8002e2e:	eb63 0901 	sbc.w	r9, r3, r1
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e46:	4690      	mov	r8, r2
 8002e48:	4699      	mov	r9, r3
 8002e4a:	4623      	mov	r3, r4
 8002e4c:	eb18 0303 	adds.w	r3, r8, r3
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	462b      	mov	r3, r5
 8002e54:	eb49 0303 	adc.w	r3, r9, r3
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e66:	4629      	mov	r1, r5
 8002e68:	024b      	lsls	r3, r1, #9
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e70:	4621      	mov	r1, r4
 8002e72:	024a      	lsls	r2, r1, #9
 8002e74:	4610      	mov	r0, r2
 8002e76:	4619      	mov	r1, r3
 8002e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e84:	f7fd f9a8 	bl	80001d8 <__aeabi_uldivmod>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e90:	e058      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e92:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	099b      	lsrs	r3, r3, #6
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ea2:	623b      	str	r3, [r7, #32]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002eac:	4642      	mov	r2, r8
 8002eae:	464b      	mov	r3, r9
 8002eb0:	f04f 0000 	mov.w	r0, #0
 8002eb4:	f04f 0100 	mov.w	r1, #0
 8002eb8:	0159      	lsls	r1, r3, #5
 8002eba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ebe:	0150      	lsls	r0, r2, #5
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4641      	mov	r1, r8
 8002ec6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002eca:	4649      	mov	r1, r9
 8002ecc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002edc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ee0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ee4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ee8:	eb63 050b 	sbc.w	r5, r3, fp
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	00eb      	lsls	r3, r5, #3
 8002ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002efa:	00e2      	lsls	r2, r4, #3
 8002efc:	4614      	mov	r4, r2
 8002efe:	461d      	mov	r5, r3
 8002f00:	4643      	mov	r3, r8
 8002f02:	18e3      	adds	r3, r4, r3
 8002f04:	603b      	str	r3, [r7, #0]
 8002f06:	464b      	mov	r3, r9
 8002f08:	eb45 0303 	adc.w	r3, r5, r3
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	028b      	lsls	r3, r1, #10
 8002f1e:	4621      	mov	r1, r4
 8002f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f24:	4621      	mov	r1, r4
 8002f26:	028a      	lsls	r2, r1, #10
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f2e:	2200      	movs	r2, #0
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	61fa      	str	r2, [r7, #28]
 8002f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f38:	f7fd f94e 	bl	80001d8 <__aeabi_uldivmod>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4613      	mov	r3, r2
 8002f42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	0c1b      	lsrs	r3, r3, #16
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f5e:	e002      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3750      	adds	r7, #80	; 0x50
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800
 8002f78:	00f42400 	.word	0x00f42400
 8002f7c:	007a1200 	.word	0x007a1200

08002f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e041      	b.n	8003016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7fd fea6 	bl	8000cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3304      	adds	r3, #4
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	f000 fac0 	bl	8003544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e041      	b.n	80030b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d106      	bne.n	800304a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f839 	bl	80030bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2202      	movs	r2, #2
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3304      	adds	r3, #4
 800305a:	4619      	mov	r1, r3
 800305c:	4610      	mov	r0, r2
 800305e:	f000 fa71 	bl	8003544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d109      	bne.n	80030f4 <HAL_TIM_PWM_Start+0x24>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	e022      	b.n	800313a <HAL_TIM_PWM_Start+0x6a>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d109      	bne.n	800310e <HAL_TIM_PWM_Start+0x3e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b01      	cmp	r3, #1
 8003104:	bf14      	ite	ne
 8003106:	2301      	movne	r3, #1
 8003108:	2300      	moveq	r3, #0
 800310a:	b2db      	uxtb	r3, r3
 800310c:	e015      	b.n	800313a <HAL_TIM_PWM_Start+0x6a>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b08      	cmp	r3, #8
 8003112:	d109      	bne.n	8003128 <HAL_TIM_PWM_Start+0x58>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e008      	b.n	800313a <HAL_TIM_PWM_Start+0x6a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b01      	cmp	r3, #1
 8003132:	bf14      	ite	ne
 8003134:	2301      	movne	r3, #1
 8003136:	2300      	moveq	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e068      	b.n	8003214 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d104      	bne.n	8003152 <HAL_TIM_PWM_Start+0x82>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003150:	e013      	b.n	800317a <HAL_TIM_PWM_Start+0xaa>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b04      	cmp	r3, #4
 8003156:	d104      	bne.n	8003162 <HAL_TIM_PWM_Start+0x92>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003160:	e00b      	b.n	800317a <HAL_TIM_PWM_Start+0xaa>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d104      	bne.n	8003172 <HAL_TIM_PWM_Start+0xa2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003170:	e003      	b.n	800317a <HAL_TIM_PWM_Start+0xaa>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2202      	movs	r2, #2
 8003176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2201      	movs	r2, #1
 8003180:	6839      	ldr	r1, [r7, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fc84 	bl	8003a90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a23      	ldr	r2, [pc, #140]	; (800321c <HAL_TIM_PWM_Start+0x14c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d107      	bne.n	80031a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1d      	ldr	r2, [pc, #116]	; (800321c <HAL_TIM_PWM_Start+0x14c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d018      	beq.n	80031de <HAL_TIM_PWM_Start+0x10e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b4:	d013      	beq.n	80031de <HAL_TIM_PWM_Start+0x10e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a19      	ldr	r2, [pc, #100]	; (8003220 <HAL_TIM_PWM_Start+0x150>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00e      	beq.n	80031de <HAL_TIM_PWM_Start+0x10e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a17      	ldr	r2, [pc, #92]	; (8003224 <HAL_TIM_PWM_Start+0x154>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d009      	beq.n	80031de <HAL_TIM_PWM_Start+0x10e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a16      	ldr	r2, [pc, #88]	; (8003228 <HAL_TIM_PWM_Start+0x158>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d004      	beq.n	80031de <HAL_TIM_PWM_Start+0x10e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a14      	ldr	r2, [pc, #80]	; (800322c <HAL_TIM_PWM_Start+0x15c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d111      	bne.n	8003202 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b06      	cmp	r3, #6
 80031ee:	d010      	beq.n	8003212 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003200:	e007      	b.n	8003212 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0201 	orr.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40010000 	.word	0x40010000
 8003220:	40000400 	.word	0x40000400
 8003224:	40000800 	.word	0x40000800
 8003228:	40000c00 	.word	0x40000c00
 800322c:	40014000 	.word	0x40014000

08003230 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800324a:	2302      	movs	r3, #2
 800324c:	e0ae      	b.n	80033ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b0c      	cmp	r3, #12
 800325a:	f200 809f 	bhi.w	800339c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800325e:	a201      	add	r2, pc, #4	; (adr r2, 8003264 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003264:	08003299 	.word	0x08003299
 8003268:	0800339d 	.word	0x0800339d
 800326c:	0800339d 	.word	0x0800339d
 8003270:	0800339d 	.word	0x0800339d
 8003274:	080032d9 	.word	0x080032d9
 8003278:	0800339d 	.word	0x0800339d
 800327c:	0800339d 	.word	0x0800339d
 8003280:	0800339d 	.word	0x0800339d
 8003284:	0800331b 	.word	0x0800331b
 8003288:	0800339d 	.word	0x0800339d
 800328c:	0800339d 	.word	0x0800339d
 8003290:	0800339d 	.word	0x0800339d
 8003294:	0800335b 	.word	0x0800335b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 f9d0 	bl	8003644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0208 	orr.w	r2, r2, #8
 80032b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0204 	bic.w	r2, r2, #4
 80032c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6999      	ldr	r1, [r3, #24]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	691a      	ldr	r2, [r3, #16]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	619a      	str	r2, [r3, #24]
      break;
 80032d6:	e064      	b.n	80033a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fa16 	bl	8003710 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6999      	ldr	r1, [r3, #24]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	021a      	lsls	r2, r3, #8
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	619a      	str	r2, [r3, #24]
      break;
 8003318:	e043      	b.n	80033a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68b9      	ldr	r1, [r7, #8]
 8003320:	4618      	mov	r0, r3
 8003322:	f000 fa61 	bl	80037e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	69da      	ldr	r2, [r3, #28]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0208 	orr.w	r2, r2, #8
 8003334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69da      	ldr	r2, [r3, #28]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0204 	bic.w	r2, r2, #4
 8003344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69d9      	ldr	r1, [r3, #28]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	61da      	str	r2, [r3, #28]
      break;
 8003358:	e023      	b.n	80033a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	4618      	mov	r0, r3
 8003362:	f000 faab 	bl	80038bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69d9      	ldr	r1, [r3, #28]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	021a      	lsls	r2, r3, #8
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	61da      	str	r2, [r3, #28]
      break;
 800339a:	e002      	b.n	80033a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	75fb      	strb	r3, [r7, #23]
      break;
 80033a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_TIM_ConfigClockSource+0x1c>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e0b4      	b.n	800353a <HAL_TIM_ConfigClockSource+0x186>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003408:	d03e      	beq.n	8003488 <HAL_TIM_ConfigClockSource+0xd4>
 800340a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340e:	f200 8087 	bhi.w	8003520 <HAL_TIM_ConfigClockSource+0x16c>
 8003412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003416:	f000 8086 	beq.w	8003526 <HAL_TIM_ConfigClockSource+0x172>
 800341a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341e:	d87f      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x16c>
 8003420:	2b70      	cmp	r3, #112	; 0x70
 8003422:	d01a      	beq.n	800345a <HAL_TIM_ConfigClockSource+0xa6>
 8003424:	2b70      	cmp	r3, #112	; 0x70
 8003426:	d87b      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x16c>
 8003428:	2b60      	cmp	r3, #96	; 0x60
 800342a:	d050      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x11a>
 800342c:	2b60      	cmp	r3, #96	; 0x60
 800342e:	d877      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x16c>
 8003430:	2b50      	cmp	r3, #80	; 0x50
 8003432:	d03c      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0xfa>
 8003434:	2b50      	cmp	r3, #80	; 0x50
 8003436:	d873      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x16c>
 8003438:	2b40      	cmp	r3, #64	; 0x40
 800343a:	d058      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x13a>
 800343c:	2b40      	cmp	r3, #64	; 0x40
 800343e:	d86f      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x16c>
 8003440:	2b30      	cmp	r3, #48	; 0x30
 8003442:	d064      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x15a>
 8003444:	2b30      	cmp	r3, #48	; 0x30
 8003446:	d86b      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x16c>
 8003448:	2b20      	cmp	r3, #32
 800344a:	d060      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x15a>
 800344c:	2b20      	cmp	r3, #32
 800344e:	d867      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x16c>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d05c      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x15a>
 8003454:	2b10      	cmp	r3, #16
 8003456:	d05a      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x15a>
 8003458:	e062      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6899      	ldr	r1, [r3, #8]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f000 faf1 	bl	8003a50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800347c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	609a      	str	r2, [r3, #8]
      break;
 8003486:	e04f      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	6899      	ldr	r1, [r3, #8]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f000 fada 	bl	8003a50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034aa:	609a      	str	r2, [r3, #8]
      break;
 80034ac:	e03c      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6859      	ldr	r1, [r3, #4]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	461a      	mov	r2, r3
 80034bc:	f000 fa4e 	bl	800395c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2150      	movs	r1, #80	; 0x50
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 faa7 	bl	8003a1a <TIM_ITRx_SetConfig>
      break;
 80034cc:	e02c      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6859      	ldr	r1, [r3, #4]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	461a      	mov	r2, r3
 80034dc:	f000 fa6d 	bl	80039ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2160      	movs	r1, #96	; 0x60
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fa97 	bl	8003a1a <TIM_ITRx_SetConfig>
      break;
 80034ec:	e01c      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6859      	ldr	r1, [r3, #4]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	461a      	mov	r2, r3
 80034fc:	f000 fa2e 	bl	800395c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2140      	movs	r1, #64	; 0x40
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fa87 	bl	8003a1a <TIM_ITRx_SetConfig>
      break;
 800350c:	e00c      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4619      	mov	r1, r3
 8003518:	4610      	mov	r0, r2
 800351a:	f000 fa7e 	bl	8003a1a <TIM_ITRx_SetConfig>
      break;
 800351e:	e003      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
      break;
 8003524:	e000      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003526:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003538:	7bfb      	ldrb	r3, [r7, #15]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a34      	ldr	r2, [pc, #208]	; (8003628 <TIM_Base_SetConfig+0xe4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00f      	beq.n	800357c <TIM_Base_SetConfig+0x38>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003562:	d00b      	beq.n	800357c <TIM_Base_SetConfig+0x38>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a31      	ldr	r2, [pc, #196]	; (800362c <TIM_Base_SetConfig+0xe8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d007      	beq.n	800357c <TIM_Base_SetConfig+0x38>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a30      	ldr	r2, [pc, #192]	; (8003630 <TIM_Base_SetConfig+0xec>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d003      	beq.n	800357c <TIM_Base_SetConfig+0x38>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a2f      	ldr	r2, [pc, #188]	; (8003634 <TIM_Base_SetConfig+0xf0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d108      	bne.n	800358e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a25      	ldr	r2, [pc, #148]	; (8003628 <TIM_Base_SetConfig+0xe4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01b      	beq.n	80035ce <TIM_Base_SetConfig+0x8a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359c:	d017      	beq.n	80035ce <TIM_Base_SetConfig+0x8a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a22      	ldr	r2, [pc, #136]	; (800362c <TIM_Base_SetConfig+0xe8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <TIM_Base_SetConfig+0x8a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a21      	ldr	r2, [pc, #132]	; (8003630 <TIM_Base_SetConfig+0xec>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00f      	beq.n	80035ce <TIM_Base_SetConfig+0x8a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a20      	ldr	r2, [pc, #128]	; (8003634 <TIM_Base_SetConfig+0xf0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00b      	beq.n	80035ce <TIM_Base_SetConfig+0x8a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a1f      	ldr	r2, [pc, #124]	; (8003638 <TIM_Base_SetConfig+0xf4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d007      	beq.n	80035ce <TIM_Base_SetConfig+0x8a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a1e      	ldr	r2, [pc, #120]	; (800363c <TIM_Base_SetConfig+0xf8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d003      	beq.n	80035ce <TIM_Base_SetConfig+0x8a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a1d      	ldr	r2, [pc, #116]	; (8003640 <TIM_Base_SetConfig+0xfc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d108      	bne.n	80035e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a08      	ldr	r2, [pc, #32]	; (8003628 <TIM_Base_SetConfig+0xe4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d103      	bne.n	8003614 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	615a      	str	r2, [r3, #20]
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40010000 	.word	0x40010000
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800
 8003634:	40000c00 	.word	0x40000c00
 8003638:	40014000 	.word	0x40014000
 800363c:	40014400 	.word	0x40014400
 8003640:	40014800 	.word	0x40014800

08003644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f023 0201 	bic.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0303 	bic.w	r3, r3, #3
 800367a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f023 0302 	bic.w	r3, r3, #2
 800368c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a1c      	ldr	r2, [pc, #112]	; (800370c <TIM_OC1_SetConfig+0xc8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d10c      	bne.n	80036ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f023 0308 	bic.w	r3, r3, #8
 80036a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f023 0304 	bic.w	r3, r3, #4
 80036b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a13      	ldr	r2, [pc, #76]	; (800370c <TIM_OC1_SetConfig+0xc8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d111      	bne.n	80036e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	621a      	str	r2, [r3, #32]
}
 8003700:	bf00      	nop
 8003702:	371c      	adds	r7, #28
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	40010000 	.word	0x40010000

08003710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f023 0210 	bic.w	r2, r3, #16
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f023 0320 	bic.w	r3, r3, #32
 800375a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a1e      	ldr	r2, [pc, #120]	; (80037e4 <TIM_OC2_SetConfig+0xd4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d10d      	bne.n	800378c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800378a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a15      	ldr	r2, [pc, #84]	; (80037e4 <TIM_OC2_SetConfig+0xd4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d113      	bne.n	80037bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800379a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40010000 	.word	0x40010000

080037e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0303 	bic.w	r3, r3, #3
 800381e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a1d      	ldr	r2, [pc, #116]	; (80038b8 <TIM_OC3_SetConfig+0xd0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d10d      	bne.n	8003862 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800384c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	021b      	lsls	r3, r3, #8
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a14      	ldr	r2, [pc, #80]	; (80038b8 <TIM_OC3_SetConfig+0xd0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d113      	bne.n	8003892 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	621a      	str	r2, [r3, #32]
}
 80038ac:	bf00      	nop
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	40010000 	.word	0x40010000

080038bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	031b      	lsls	r3, r3, #12
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a10      	ldr	r2, [pc, #64]	; (8003958 <TIM_OC4_SetConfig+0x9c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d109      	bne.n	8003930 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003922:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	019b      	lsls	r3, r3, #6
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4313      	orrs	r3, r2
 800392e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	621a      	str	r2, [r3, #32]
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40010000 	.word	0x40010000

0800395c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	f023 0201 	bic.w	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f023 030a 	bic.w	r3, r3, #10
 8003998:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	621a      	str	r2, [r3, #32]
}
 80039ae:	bf00      	nop
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b087      	sub	sp, #28
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f023 0210 	bic.w	r2, r3, #16
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	031b      	lsls	r3, r3, #12
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	621a      	str	r2, [r3, #32]
}
 8003a0e:	bf00      	nop
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b085      	sub	sp, #20
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f043 0307 	orr.w	r3, r3, #7
 8003a3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	609a      	str	r2, [r3, #8]
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	021a      	lsls	r2, r3, #8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	609a      	str	r2, [r3, #8]
}
 8003a84:	bf00      	nop
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f003 031f 	and.w	r3, r3, #31
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a1a      	ldr	r2, [r3, #32]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a1a      	ldr	r2, [r3, #32]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	621a      	str	r2, [r3, #32]
}
 8003ace:	bf00      	nop
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e050      	b.n	8003b96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1c      	ldr	r2, [pc, #112]	; (8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d018      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b40:	d013      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a18      	ldr	r2, [pc, #96]	; (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00e      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a16      	ldr	r2, [pc, #88]	; (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d009      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a15      	ldr	r2, [pc, #84]	; (8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d004      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a13      	ldr	r2, [pc, #76]	; (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d10c      	bne.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	40000400 	.word	0x40000400
 8003bac:	40000800 	.word	0x40000800
 8003bb0:	40000c00 	.word	0x40000c00
 8003bb4:	40014000 	.word	0x40014000

08003bb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e03d      	b.n	8003c50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <__libc_init_array>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4d0d      	ldr	r5, [pc, #52]	; (8003c94 <__libc_init_array+0x38>)
 8003c60:	4c0d      	ldr	r4, [pc, #52]	; (8003c98 <__libc_init_array+0x3c>)
 8003c62:	1b64      	subs	r4, r4, r5
 8003c64:	10a4      	asrs	r4, r4, #2
 8003c66:	2600      	movs	r6, #0
 8003c68:	42a6      	cmp	r6, r4
 8003c6a:	d109      	bne.n	8003c80 <__libc_init_array+0x24>
 8003c6c:	4d0b      	ldr	r5, [pc, #44]	; (8003c9c <__libc_init_array+0x40>)
 8003c6e:	4c0c      	ldr	r4, [pc, #48]	; (8003ca0 <__libc_init_array+0x44>)
 8003c70:	f000 f820 	bl	8003cb4 <_init>
 8003c74:	1b64      	subs	r4, r4, r5
 8003c76:	10a4      	asrs	r4, r4, #2
 8003c78:	2600      	movs	r6, #0
 8003c7a:	42a6      	cmp	r6, r4
 8003c7c:	d105      	bne.n	8003c8a <__libc_init_array+0x2e>
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c84:	4798      	blx	r3
 8003c86:	3601      	adds	r6, #1
 8003c88:	e7ee      	b.n	8003c68 <__libc_init_array+0xc>
 8003c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8e:	4798      	blx	r3
 8003c90:	3601      	adds	r6, #1
 8003c92:	e7f2      	b.n	8003c7a <__libc_init_array+0x1e>
 8003c94:	08003cec 	.word	0x08003cec
 8003c98:	08003cec 	.word	0x08003cec
 8003c9c:	08003cec 	.word	0x08003cec
 8003ca0:	08003cf0 	.word	0x08003cf0

08003ca4 <memset>:
 8003ca4:	4402      	add	r2, r0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d100      	bne.n	8003cae <memset+0xa>
 8003cac:	4770      	bx	lr
 8003cae:	f803 1b01 	strb.w	r1, [r3], #1
 8003cb2:	e7f9      	b.n	8003ca8 <memset+0x4>

08003cb4 <_init>:
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb6:	bf00      	nop
 8003cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cba:	bc08      	pop	{r3}
 8003cbc:	469e      	mov	lr, r3
 8003cbe:	4770      	bx	lr

08003cc0 <_fini>:
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	bf00      	nop
 8003cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc6:	bc08      	pop	{r3}
 8003cc8:	469e      	mov	lr, r3
 8003cca:	4770      	bx	lr
